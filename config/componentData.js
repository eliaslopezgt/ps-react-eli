module.exports = /* eslint-disable */ [{"name":"EmailInput","description":"Emailinput with integrated label to enforce consistency in layout, error display, label placement, and required field marker.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"onChange":{"type":{"name":"func"},"required":false,"description":"Function to call onChange"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextInput from '../TextInput';\n\n/** Emailinput with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction EmailInput({htmlId, onChange, ...props}) {\n  return (\n    <TextInput\n      htmlId={htmlId}\n      cssClass=\"form-input-wrapper\"\n      name=\"EmailAddress\"\n      label=\"Email\"\n      pattern=\"[\\w.\\-_]{2,}@[A-Z\\w]{2,}\\.[a-zA-Z]{2,8}\"\n      placeholder=\"\"\n      required\n      title=\"Example: email@domain.com\"\n      type=\"text\"\n      onChange={onChange}\n      {...props}\n    />\n  );\n};\n\nEmailInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func,\n\n};\n\nexport default EmailInput;\n","examples":[{"name":"Example","description":"All features enabled","code":"import React from 'react';\nimport EmailInput from 'ps-react/EmailInput';\n\n/** All features enabled */\nclass ExampleAllFeatures extends React.Component {\n\n  render() {\n    return (\n      <div>\n        <EmailInput\n          htmlId=\"leadFormEmail\"\n          onChange={ event => console.log(event.target.value)}\n          {...this.props} />\n      </div>\n    )\n  }\n}\n\nexport default ExampleAllFeatures;\n"}]},{"name":"EyeIcon","description":"SVG Eye Icon","code":"import React from 'react';\n\n/** SVG Eye Icon */\nfunction EyeIcon() {\n  // Attribution: Fabi√°n Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n  return (\n    <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\n      </g>\n    </svg>\n  )\n}\n\nexport default EyeIcon;\n","examples":[{"name":"Example","description":"EyeIcon Example for Elias","code":"import React from 'react';\nimport EyeIcon from 'ps-react/EyeIcon';\n\n/** EyeIcon Example for Elias*/\nexport default function Example() {\n    return <EyeIcon/>\n}\n"}]},{"name":"FullNameInput","description":"Full Name input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"onChange":{"type":{"name":"func"},"required":false,"description":"Function to call onChange"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextInput from '../TextInput';\n\n/** Full Name input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction FullNameInput({htmlId, onChange, ...props}) {\n  return (\n    <TextInput\n      htmlId={htmlId}\n      cssClass=\"form-input-wrapper\"\n      name=\"fullname\"\n      label=\"Name (First &amp; Last)\"\n      pattern=\"((\\b[a-zA-Z][a-zA-Z.,'-]{1,})\\s{0,}){1,}$\"\n      placeholder=\"\"\n      required\n      title=\"Example: Firstname Lastname\"\n      type=\"text\"\n      onChange={onChange}\n      {...props}\n    />\n  );\n};\n\nFullNameInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func,\n\n};\n\nexport default FullNameInput;\n","examples":[{"name":"Example","description":"All features enabled","code":"import React from 'react';\nimport FullNameInput from 'ps-react/FullNameInput';\n\n/** All features enabled */\nclass ExampleAllFeatures extends React.Component {\n\n  render() {\n    return (\n      <div>\n        <FullNameInput\n          htmlId=\"leadFormFullname\"\n          onChange={ event => console.log(event.target.value)}\n          {...this.props} />\n      </div>\n    )\n  }\n}\n\nexport default ExampleAllFeatures;\n"}]},{"name":"HiddenInput","description":"Hidden Input with name and value","props":{"name":{"type":{"name":"string"},"required":false,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used."},"value":{"type":{"name":"any"},"required":false,"description":"Value"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** Hidden Input with name and value */\nfunction HiddenInput({name, value, ...props}) {\n  return (\n      <input\n        name={name}\n        value={value}\n        type=\"hidden\"\n        {...props}/>\n  );\n};\n\nHiddenInput.propTypes = {\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n};\n\nexport default HiddenInput;\n","examples":[{"name":"Example","description":"All features enabled","code":"import React from 'react';\nimport HiddenInput from 'ps-react/HiddenInput';\n\n/** All features enabled */\nclass ExampleAllFeatures extends React.Component {\n\n  render() {\n    return (\n      <HiddenInput\n      name=\"testname\"\n      value=\"testvalue\"\n      {...this.props} />\n    )\n  }\n}\n\nexport default ExampleAllFeatures;\n"}]},{"name":"Label","description":"Label with required field display, htmlFor","props":{"htmlFor":{"type":{"name":"string"},"required":true,"description":"HTML ID for associated input"},"label":{"type":{"name":"string"},"required":true,"description":"Label text"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** Label with required field display, htmlFor */\nfunction Label({htmlFor, label}) {\n    return (\n        <label htmlFor={htmlFor}>\n            {label}\n        </label>\n    )\n}\n\nLabel.propTypes = {\n    /** HTML ID for associated input */\n    htmlFor: PropTypes.string.isRequired,\n\n    /** Label text */\n    label: PropTypes.string.isRequired,\n\n}\n\nexport default Label;\n","examples":[{"name":"ExampleOptional","description":"Standard Label","code":"import React from 'react';\nimport Label from 'ps-react/Label';\n\n/** Standard Label */\nexport default function ExampleStandard() {\n    return <Label htmlFor=\"test\" label=\"test\" />\n}\n"}]},{"name":"LeadForm","description":"LeadForm","props":{"action":{"type":{"name":"string"},"required":true,"description":"Action for the form"},"className":{"type":{"name":"string"},"required":false,"description":"Form ClassName"},"htmlId":{"type":{"name":"string"},"required":false,"description":"Form htmlId"},"method":{"type":{"name":"enum","value":[{"value":"'post'","computed":false},{"value":"'get'","computed":false}]},"required":false,"description":"Form Method"},"name":{"type":{"name":"string"},"required":false,"description":"Form Name"},"fullNameOnChange":{"type":{"name":"func"},"required":false,"description":"Function called when fullName input value changes"},"emailOnChange":{"type":{"name":"func"},"required":false,"description":"Function called when Email input value changes"},"phoneOnChange":{"type":{"name":"func"},"required":false,"description":"Function called when Phone input value changes"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport FullNameInput from 'ps-react/FullNameInput';\nimport EmailInput from 'ps-react/EmailInput';\nimport PhoneInput from 'ps-react/PhoneInput';\nimport SubmitButton from 'ps-react/SubmitButton';\nimport HiddenInput from 'ps-react/HiddenInput';\n\n/** LeadForm */\nfunction LeadForm({action, className, htmlId, method, name, fullNameOnChange, emailOnChange, phoneOnChange, ...props}) {\n    return (\n        <form action={action} className={className} id={htmlId} method={method} name={name}>\n          <FullNameInput htmlId=\"leadFormFullname\" onChange={fullNameOnChange}/>\n          <EmailInput htmlId=\"leadFormEmail\" onChange={emailOnChange}/>\n          <PhoneInput htmlId=\"leadFormPhone\" onChange={phoneOnChange}/>\n\n          <HiddenInput name=\"creative_id\"/>\n          <HiddenInput name=\"campaignid\"/>\n          <HiddenInput name=\"utm_source\"/>\n          <HiddenInput name=\"SessionId\"/>\n\n          <HiddenInput name=\"DesiredState\"/>\n          <HiddenInput name=\"DesiredCity\"/>\n          <HiddenInput name=\"DesiredZip\"/>\n          <HiddenInput name=\"DesiredCountry\"/>\n\n          <HiddenInput name=\"SourceId\"/>\n          <HiddenInput name=\"SubsourceId\"/>\n          <HiddenInput name=\"Form_url\"/>\n          <HiddenInput name=\"Referrer_url\"/>\n          <HiddenInput name=\"Form_id\"/>\n\n          <HiddenInput name=\"inputLocation\"/>\n          <HiddenInput name=\"inputMileRadius\"/>\n          <HiddenInput name=\"inputRoomType\"/>\n          <HiddenInput name=\"inputBudget\"/>\n          <HiddenInput name=\"authenticity_token\"/>\n          <HiddenInput name=\"DesiredCareType\"/>\n\n          <SubmitButton className=\"submit-btn\" label=\"Request info\" iconClassName=\"fa icon-chevron-right\"/>\n        </form>\n    )\n}\n\nLeadForm.propTypes = {\n    /** Action for the form */\n    action: PropTypes.string.isRequired,\n\n    /** Form ClassName */\n    className: PropTypes.string,\n\n    /** Form htmlId */\n    htmlId: PropTypes.string,\n\n    /** Form Method */\n    method: PropTypes.oneOf(['post', 'get']),\n\n    /** Form Name */\n    name: PropTypes.string,\n\n    /** Function called when fullName input value changes */\n    fullNameOnChange: PropTypes.func,\n\n    /** Function called when Email input value changes */\n    emailOnChange: PropTypes.func,\n\n    /** Function called when Phone input value changes */\n    phoneOnChange: PropTypes.func,\n\n}\n\nexport default LeadForm;\n","examples":[{"name":"Example","description":"Standard LeadForm","code":"import React from 'react';\nimport LeadForm from 'ps-react/LeadForm';\n\n/** Standard LeadForm */\nexport default function ExampleStandard() {\n    return <LeadForm action=\".\" className=\"testclass\" htmlId=\"testformId\" method=\"post\" name=\"LeadFormName\" />\n}\n"}]},{"name":"PasswordInput","description":"Password input with integrated label, quality tips, and show password toggle.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used by convention."},"value":{"type":{"name":"any"},"required":false,"description":"Password value"},"label":{"type":{"name":"string"},"required":false,"description":"Input label","defaultValue":{"value":"'Password'","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function called when password input value changes"},"maxLength":{"type":{"name":"number"},"required":false,"description":"Max password length accepted","defaultValue":{"value":"50","computed":false}},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder displayed when no password is entered"},"showVisibilityToggle":{"type":{"name":"bool"},"required":false,"description":"Set to true to show the toggle for displaying the currently entered password","defaultValue":{"value":"false","computed":false}},"quality":{"type":{"name":"number"},"required":false,"description":"Display password quality visually via ProgressBar, accepts a number between 0 and 100"},"error":{"type":{"name":"string"},"required":false,"description":"Validation error to display"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport ProgressBar from '../ProgressBar';\nimport EyeIcon from '../EyeIcon';\nimport TextInput from '../TextInput';\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nclass PasswordInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPassword: false\n    }\n  }\n\n  toggleShowPassword = event => {\n    this.setState(prevState => {\n      return { showPassword: !prevState.showPassword };\n    });\n    if (event) event.preventDefault();\n  }\n\n  render() {\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\n    const { showPassword } = this.state;\n\n    return (\n      <TextInput\n        htmlId={htmlId}\n        label={label}\n        placeholder={placeholder}\n        type={showPassword ? 'text' : 'password'}\n        onChange={onChange}\n        value={value}\n        maxLength={maxLength}\n        error={error}\n        required\n        {...props}>\n        {\n          showVisibilityToggle &&\n          <a\n            href=\"\"\n            onClick={this.toggleShowPassword}\n            style={{ marginLeft: 5 }}>\n            <EyeIcon />\n          </a>\n        }\n        {\n          value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\n        }\n      </TextInput>\n    );\n  }\n}\n\nPasswordInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\n  name: PropTypes.string.isRequired,\n\n  /** Password value */\n  value: PropTypes.any,\n\n  /** Input label */\n  label: PropTypes.string,\n\n  /** Function called when password input value changes */\n  onChange: PropTypes.func.isRequired,\n\n  /** Max password length accepted */\n  maxLength: PropTypes.number,\n\n  /** Placeholder displayed when no password is entered */\n  placeholder: PropTypes.string,\n\n  /** Set to true to show the toggle for displaying the currently entered password */\n  showVisibilityToggle: PropTypes.bool,\n\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n  quality: PropTypes.number,\n\n  /** Validation error to display */\n  error: PropTypes.string\n};\n\nPasswordInput.defaultProps = {\n  maxLength: 50,\n  showVisibilityToggle: false,\n  label: 'Password'\n};\n\nexport default PasswordInput;\n","examples":[{"name":"ExampleAllFeatures","description":"All features enabled","code":"import React from 'react';\nimport PasswordInput from 'ps-react/PasswordInput';\n\n/** All features enabled */\nclass ExampleAllFeatures extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      password: ''\n    };\n  }\n\n  getQuality() {\n    const length = this.state.password.length;\n    return length > 10 ? 100 : length * 10;\n  }\n\n  render() {\n    return (\n      <div>\n        <PasswordInput\n          htmlId=\"password-input-example-all-features\"\n          name=\"password\"\n          onChange={ event => this.setState({ password: event.target.value })}\n          value={this.state.password}\n          minLength={8}\n          placeholder=\"Enter password\"\n          showVisibilityToggle\n          quality={this.getQuality()}\n          {...this.props} />\n      </div>\n    )\n  }\n}\n\nexport default ExampleAllFeatures;\n"}]},{"name":"PhoneInput","description":"PhoneInput with integrated label to enforce consistency in layout, error display, label placement, and required field marker.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"onChange":{"type":{"name":"func"},"required":false,"description":"Function to call onChange"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextInput from '../TextInput';\n\n/** PhoneInput with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction PhoneInput({htmlId, onChange, ...props}) {\n  return (\n    <TextInput\n      htmlId={htmlId}\n      cssClass=\"form-input-wrapper\"\n      name=\"Phone\"\n      label=\"Phone Number\"\n      pattern=\"(1|001)?[-. ]?\\(?([2-9][0-9]{2})\\)?[-. ]?([2-9](?!11)[0-9]{2})[-. ]?([0-9]{4})\"\n      placeholder=\"\"\n      required\n      title=\"Example: 555-555-5555\"\n      type=\"tel\"\n      onChange={onChange}\n      {...props}\n    />\n  );\n};\n\nPhoneInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func,\n\n};\n\nexport default PhoneInput;\n","examples":[{"name":"Example","description":"All features enabled","code":"import React from 'react';\nimport PhoneInput from 'ps-react/PhoneInput';\n\n/** All features enabled */\nclass ExampleAllFeatures extends React.Component {\n\n  render() {\n    return (\n      <div>\n        <PhoneInput\n          htmlId=\"leadFormPhone\"\n          onChange={ event => console.log(event.target.value)}\n          {...this.props} />\n      </div>\n    )\n  }\n}\n\nexport default ExampleAllFeatures;\n"}]},{"name":"ProgressBar","description":"","props":{"percent":{"type":{"name":"number"},"required":true,"description":"Percent of progress completed"},"width":{"type":{"name":"number"},"required":true,"description":"Bar width"},"height":{"type":{"name":"number"},"required":false,"description":"Bar height","defaultValue":{"value":"5","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass ProgressBar extends React.Component {\n  getColor = (percent) => {\n    if (this.props.percent === 100) return 'green';\n    return this.props.percent > 50 ? 'lightgreen' : 'red';\n  }\n\n  getWidthAsPercentOfTotalWidth = () => {\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\n  }\n\n  render() {\n    const {percent, width, height} = this.props;\n    return (\n      <div style={{border: 'solid 1px lightgray', width: width}}>\n        <div style={{\n          width: this.getWidthAsPercentOfTotalWidth(),\n          height,\n          backgroundColor: this.getColor(percent)\n        }} />\n      </div>\n    );\n  }\n}\n\nProgressBar.propTypes = {\n  /** Percent of progress completed */\n  percent: PropTypes.number.isRequired,\n\n  /** Bar width */\n  width: PropTypes.number.isRequired,\n\n  /** Bar height */\n  height: PropTypes.number\n};\n\nProgressBar.defaultProps = {\n  height: 5\n};\n\nexport default ProgressBar;\n","examples":[]},{"name":"SubmitButton","description":"Label with required field display, htmlFor","props":{"className":{"type":{"name":"string"},"required":false,"description":"ClassName for the button"},"label":{"type":{"name":"string"},"required":true,"description":"Label text"},"iconClassName":{"type":{"name":"string"},"required":false,"description":"Icon ClassName for the button"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** Label with required field display, htmlFor */\nfunction SubmitButton({className, label, iconClassName}) {\n    return (\n        <button className={className} type=\"submit\">\n            {label}\n            <i className={iconClassName}/>\n        </button>\n    )\n}\n\nSubmitButton.propTypes = {\n    /** ClassName for the button */\n    className: PropTypes.string,\n\n    /** Label text */\n    label: PropTypes.string.isRequired,\n\n    /** Icon ClassName for the button */\n    iconClassName: PropTypes.string\n}\n\nexport default SubmitButton;\n","examples":[{"name":"Example","description":"Standard SubmitButton","code":"import React from 'react';\nimport SubmitButton from 'ps-react/SubmitButton';\n\n/** Standard SubmitButton */\nexport default function ExampleStandard() {\n    return <SubmitButton className=\"testclass\" iconClassName=\"fa fa.icon\" label=\"test\" />\n}\n"}]},{"name":"TextInput","description":"Text input with integrated label to enforce consistency in layout, error display, label placement, regex pattern and required.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"cssClass":{"type":{"name":"string"},"required":true,"description":"CSS class for the outer DIV wrapper"},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"name":{"type":{"name":"string"},"required":false,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used."},"pattern":{"type":{"name":"string"},"required":true,"description":"Regex Validation Pattern"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty"},"title":{"type":{"name":"string"},"required":true,"description":"Title Tool Tip for the input"},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'number'","computed":false},{"value":"'password'","computed":false},{"value":"'tel'","computed":false}]},"required":false,"description":"Input type","defaultValue":{"value":"\"text\"","computed":false}},"onChange":{"type":{"name":"func"},"required":false,"description":"Function to call onChange"},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, regex pattern and required. */\nfunction TextInput({htmlId, cssClass, label, name, pattern, placeholder, title, type = \"text\", onChange, value, children, ...props}) {\n  return (\n    <div className={cssClass}>\n      <input\n        id={htmlId}\n        name={name}\n        pattern={pattern}\n        placeholder={placeholder}\n        title={title}\n        type={type}\n        value={value}\n        onChange={onChange}\n        {...props}/>\n        {children}\n        <Label htmlFor={htmlId} label={label} />\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** CSS class for the outer DIV wrapper */\n  cssClass: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string,\n\n  /** Regex Validation Pattern */\n  pattern: PropTypes.string.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Title Tool Tip for the input */\n  title: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password', 'tel']),\n\n  /** Function to call onChange */\n  onChange: PropTypes.func,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node,\n\n};\n\nexport default TextInput;\n","examples":[{"name":"ExampleAllFeatures","description":"All features enabled","code":"import React from 'react';\nimport TextInput from 'ps-react/TextInput';\n\n/** All features enabled */\nclass ExampleAllFeatures extends React.Component {\n\n  render() {\n    return (\n      <div>\n        <TextInput\n        htmlId=\"test\"\n        cssClass=\"testClass\"\n        label=\"testLabel\"\n        pattern=\"testPattern\"\n        title=\"testTitle\"\n        name=\"test\"\n        value=\"\"\n        onChange={() => {}}\n        required\n        {...this.props} />\n      </div>\n    )\n  }\n}\n\nexport default ExampleAllFeatures;\n"}]}]